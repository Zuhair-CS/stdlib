/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/* eslint-disable max-lines */

import isAlmostEqual = require( '@stdlib/number/float32/base/assert/is-almost-equal' );
import isSameValuef = require( '@stdlib/number/float32/base/assert/is-same-value' );
import isSameValueZerof = require( '@stdlib/number/float32/base/assert/is-same-value-zero' );

/**
* Interface describing the `assert` namespace.
*/
interface Namespace {
	/**
	* Tests if two single-precision floating-point numbers are approximately equal within a specified number of ULPs (units in the last place).
	*
	* ## Notes
	*
	* -   The function returns `false` if either input value is `NaN`.
	* -   The function does not distinguish between `-0` and `+0`, treating them as equal.
	*
	* @param a - first input value
	* @param b - second input value
	* @param maxULP - maximum allowed ULP difference
	* @returns boolean indicating whether two single-precision floating-point numbers are approximately equal within a specified number of ULPs
	*
	* @example
	* var EPS = require( '@stdlib/constants/float32/eps' );
	*
	* var bool = ns.isAlmostEqual( 1.0, 1.0+EPS, 1 );
	* // returns true
	*
	* bool = ns.isAlmostEqual( 1.0+EPS, 1.0, 1 );
	* // returns true
	*
	* bool = ns.isAlmostEqual( 1.0, 1.0+EPS+EPS, 1 );
	* // returns false
	*
	* bool = ns.isAlmostEqual( 1.0, 1.0+EPS, 0 );
	* // returns false
	*
	* bool = ns.isAlmostEqual( 0.0, -0.0, 0 );
	* // returns true
	*
	* bool = ns.isAlmostEqual( 1.0, NaN, 1 );
	* // returns false
	*
	* bool = ns.isAlmostEqual( NaN, NaN, 1 );
	* // returns false
	*/
	isAlmostEqual: typeof isAlmostEqual;

	/**
	* Tests if two single-precision floating-point numbers are the same value.
	*
	* ## Notes
	*
	* -   The function differs from the `===` operator in that the function treats `-0` and `+0` as distinct and `NaNs` as the same.
	*
	* @param a - first input value
	* @param b - second input value
	* @returns boolean indicating whether two single-precision floating-point numbers are the same value
	*
	* @example
	* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
	*
	* var bool = ns.isSameValuef( toFloat32( 3.14 ), toFloat32( 3.14 ) );
	* // returns true
	*
	* @example
	* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
	*
	* var bool = ns.isSameValuef( toFloat32( -0.0 ), toFloat32( -0.0 ) );
	* // returns true
	*
	* @example
	* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
	*
	* var bool = ns.isSameValuef( toFloat32( -0.0 ), toFloat32( 0.0 ) );
	* // returns false
	*
	* @example
	* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
	*
	* var bool = ns.isSameValuef( toFloat32( NaN ), toFloat32( NaN ) );
	* // returns true
	*/
	isSameValuef: typeof isSameValuef;

	/**
	* Tests if two single-precision floating-point numbers are the same value.
	*
	* ## Notes
	*
	* -   The function differs from the `===` operator in that the function treats `NaNs` as the same value.
	*
	* @param a - first input value
	* @param b - second input value
	* @returns boolean indicating whether two single-precision floating-point numbers are the same value
	*
	* @example
	* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
	*
	* var bool = ns.isSameValueZerof( toFloat32( 3.14 ), toFloat32( 3.14 ) );
	* // returns true
	*
	* @example
	* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
	*
	* var bool = ns.isSameValueZerof( toFloat32( -0.0 ), toFloat32( -0.0 ) );
	* // returns true
	*
	* @example
	* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
	*
	* var bool = ns.isSameValueZerof( toFloat32( -0.0 ), toFloat32( 0.0 ) );
	* // returns true
	*
	* @example
	* var toFloat32 = require( '@stdlib/number/float64/base/to-float32' );
	*
	* var bool = ns.isSameValueZerof( toFloat32( NaN ), toFloat32( NaN ) );
	* // returns true
	*/
	isSameValueZerof: typeof isSameValueZerof;
}

/**
* Base double-precision floating-point number assert functions.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
