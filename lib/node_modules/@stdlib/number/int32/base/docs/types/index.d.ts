/*
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/* eslint-disable max-lines */

import identity = require( '@stdlib/number/int32/base/identity' );
import mul = require( '@stdlib/number/int32/base/mul' );
import muldw = require( '@stdlib/number/int32/base/muldw' );
import int32ToUint32 = require( '@stdlib/number/int32/base/to-uint32' );

/**
* Interface describing the `base` namespace.
*/
interface Namespace {
	/**
	* Evaluates the identity function for a signed 32-bit integer `x`.
	*
	* @param x - input value
	* @returns input value
	*
	* @example
	* var v = ns.identity( 1 );
	* // returns 1
	*
	* @example
	* var v = ns.identity( 2 );
	* // returns 2
	*
	* @example
	* var v = ns.identity( 0 );
	* // returns 0
	*
	* @example
	* var v = ns.identity( 2147483647 );
	* // returns 2147483647
	*/
	identity: typeof identity;

	/**
	* Performs C-like multiplication of two signed 32-bit integers.
	*
	* @param a - signed 32-bit integer
	* @param b - signed 32-bit integer
	* @returns product
	*
	* @example
	* var v = ns.mul( -10|0, 4|0 );
	* // returns -40
	*/
	mul: typeof mul;

	/**
	* Performs multiplication of two signed 32-bit integers and returns an array of two signed 32-bit integers which represents the signed 64-bit integer product.
	*
	* ## Notes
	*
	* -   When computing the product of 32-bit integer values in double-precision floating-point format (the default JavaScript numeric data type), computing the double word product is necessary in order to avoid exceeding the maximum safe double-precision floating-point integer value.
	*
	* @param a - integer
	* @param b - integer
	* @returns output array
	*
	* @example
	* var v = ns.muldw( 0xAAAAAAAA, 0x55555555 );
	* // returns [ -477218589, 1908874354 ]
	*/
	muldw: typeof muldw;

	/**
	* Converts a signed 32-bit integer to an unsigned 32-bit integer.
	*
	* @param x - signed 32-bit integer
	* @returns unsigned 32-bit integer
	*
	* @example
	* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );
	* var y = ns.int32ToUint32( float64ToInt32( -1.0 ) );
	* // returns 4294967295
	*
	* @example
	* var float64ToInt32 = require( '@stdlib/number/float64/base/to-int32' );
	* var y = ns.int32ToUint32( float64ToInt32( 3 ) );
	* // returns 3
	*/
	int32ToUint32: typeof int32ToUint32;
}

/**
* Base utilities for signed 32-bit integers.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
