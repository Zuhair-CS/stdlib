/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var copy = require( '@stdlib/utils/copy' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );
var linter = require( './linter.js' );


// MAIN //

/**
* Attaches a plugin to a remark processor to lint expected HTML sections.
*
* @param {Options} [options] - plugin options
* @param {Object} [options.schema] - schema for expected HTML sections
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Function} transform function
*
* @example
* var remark = require( 'remark' );
*
* var str = [
*     '<section class="usage">',
*     '',
*     '## Usage',
*     '',
*     '</section>',
*     '',
*     '<!-- /.usage -->',
*     '',
*     '<section class="examples">',
*     '',
*     '## Examples',
*     '',
*     '</section>',
*     '',
*     '<!-- /.examples -->',
*     ''
* ].join( '\n' );
*
* remark().use( lint ).process( str, done );
*
* function done( error ) {
*     if ( error ) {
*         throw error;
*     }
* }
*/
function attacher( options ) {
	var opts;
	var err;

	// Set default options:
	opts = copy( defaults );

	// NOTE: cannot use `arguments.length` check, as `options` may be explicitly passed as `undefined`
	if ( options !== void 0 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	return linter( opts );
}


// EXPORTS //

module.exports = attacher;
