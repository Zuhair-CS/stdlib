/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var objectKeys = require( '@stdlib/utils/keys' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isEmptyArray = require( '@stdlib/assert/is-empty-array' );
var format = require( '@stdlib/string/format' );


// FUNCTIONS //

/**
* Validates a schema object.
*
* @private
* @param {Object} schema - schema object
* @returns {(Error|null)} null or an error object
*/
function validateSchema( schema ) {
	var section;
	var keys;
	var obj;
	var i;

	keys = objectKeys( schema );
	for ( i = 0; i < keys.length; i++ ) {
		section = keys[ i ];
		obj = schema[ section ];
		if ( !isPlainObject( obj ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be an object containing properties having values which are objects. Option: `%s`.', 'schema', JSON.stringify( obj ) ) );
		}
		if ( hasOwnProp( obj, 'required' ) ) {
			if ( !isStringArray( obj.required ) && !isEmptyArray( obj.required ) ) { // eslint-disable-line max-len
				return new TypeError( format( 'invalid option. `%s` option must be an object having %s `%s` property which is an array of strings. Option: `%s`.', 'schema', 'a', section+'.required', JSON.stringify( obj ) ) );
			}
		} else {
			return new TypeError( format( 'invalid option. `%s` option must be an object having %s `%s` property which is an array of strings. Option: `%s`.', 'schema', 'a', section+'.required', JSON.stringify( obj ) ) );
		}
		if ( hasOwnProp( obj, 'optional' ) ) {
			if ( !isStringArray( obj.optional ) && !isEmptyArray( obj.optional ) ) { // eslint-disable-line max-len
				return new TypeError( format( 'invalid option. `%s` option must be an object having %s `%s` property which is an array of strings. Option: `%s`.', 'schema', 'a', section+'.optional', JSON.stringify( obj ) ) );
			}
		} else {
			return new TypeError( format( 'invalid option. `%s` option must be an object having %s `%s` property which is an array of strings. Option: `%s`.', 'schema', 'a', section+'.optional', JSON.stringify( obj ) ) );
		}
	}
	return null;
}


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {Object} [options.schema] - schema for expected HTML sections
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'schema': {
*         'root': {
*             'required': [ 'usage', 'examples', 'links' ],
*             'optional': [ 'intro', 'notes', 'c', 'references', 'related' ]
*         }
*     }
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	var err;
	if ( !isPlainObject( options ) ) {
		return new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
	}
	if ( hasOwnProp( options, 'schema' ) ) {
		if ( !isPlainObject( options.schema ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be an object. Option: `%s`.', 'schema', options.schema ) );
		}
		if ( !hasOwnProp( options.schema, 'root' ) ) {
			return new TypeError( format( 'invalid option. `%s` option must have %s `%s` property.', 'schema', 'a', 'root' ) );
		}
		err = validateSchema( options.schema );
		if ( err ) {
			return err;
		}
		opts.schema = options.schema;
	}
	return null;
}


// EXPORTS //

module.exports = validate;
