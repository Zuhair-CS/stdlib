/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var remark = require( 'remark' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var contains = require( '@stdlib/assert/contains' );
var expectedSections = require( './../lib' );


// VARIABLES //

var TEST_FIXTURES = join( __dirname, 'fixtures' );
var CUSTOM_SCHEMA = {
	'root': {
		'required': [ 'usage', 'examples', 'links', 'related' ],
		'optional': [ 'intro', 'notes', 'c', 'references' ]
	}
};
var opts = {
	'encoding': 'utf8'
};
var FIXTURE_VALID_COMPLETE = readFileSync( join( TEST_FIXTURES, 'valid_complete.md.txt' ), opts );
var FIXTURE_VALID_MEMOIZE = readFileSync( join( TEST_FIXTURES, 'valid_memoize.md.txt' ), opts );
var FIXTURE_VALID_ASIN = readFileSync( join( TEST_FIXTURES, 'valid_asin.md.txt' ), opts );
var FIXTURE_INVALID_ASIN = readFileSync( join( TEST_FIXTURES, 'invalid_asin.md.txt' ), opts );
var FIXTURE_MISSING_ROOT = readFileSync( join( TEST_FIXTURES, 'missing_required_root.md.txt' ), opts );
var FIXTURE_INCOMPLETE_C = readFileSync( join( TEST_FIXTURES, 'incomplete_c.md.txt' ), opts );


// FUNCTIONS //

function lint( text, options, clbk ) {
	remark().use( expectedSections, options ).process( text, clbk );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof expectedSections, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function validates a valid Markdown file containing all sections (default schema)', function test( t ) {
	lint( FIXTURE_VALID_COMPLETE, {}, done );

	function done( err, file ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.strictEqual( file.messages.length, 0, 'returns expected value' );
		t.end();
	}
});

tape( 'the function validates a valid Markdown file which does not contain C sections (default schema)', function test( t ) {
	lint( FIXTURE_VALID_MEMOIZE, {}, done );

	function done( err, file ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.strictEqual( file.messages.length, 0, 'returns expected value' );
		t.end();
	}
});

tape( 'the function validates a valid Markdown file containing C sections (default schema)', function test( t ) {
	lint( FIXTURE_VALID_ASIN, {}, done );

	function done( err, file ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.strictEqual( file.messages.length, 0, 'returns expected value' );
		t.end();
	}
});

tape( 'the function validates an invalid Markdown file missing a C section (default schema)', function test( t ) {
	lint( FIXTURE_INVALID_ASIN, {}, done );

	function done( err, file ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.strictEqual( file.messages.length, 1, 'returns expected value' );
		t.strictEqual( contains( file.messages[ 0 ].reason, 'Missing required sections in "c" section: `usage`' ), true, 'returns expected value' );
		t.end();
	}
});

tape( 'the function validates an invalid Markdown file missing required root sections (default schema)', function test( t ) {
	lint( FIXTURE_MISSING_ROOT, {}, done );

	function done( err, file ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.strictEqual( file.messages.length, 1, 'returns expected value' );
		t.strictEqual( contains( file.messages[ 0 ].reason, 'Missing required root-level sections: `usage`' ), true, 'returns expected value' );
		t.end();
	}
});

tape( 'the function validates an invalid Markdown file having an incomplete C section (default schema)', function test( t ) {
	lint( FIXTURE_INCOMPLETE_C, {}, done );

	function done( err, file ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.strictEqual( file.messages.length, 1, 'returns expected value' );
		t.strictEqual( contains( file.messages[ 0 ].reason, 'Missing required sections in "c" section: `usage`, `examples`' ), true, 'returns expected value' );
		t.end();
	}
});

tape( 'the function validates a valid Markdown file containing all sections using a custom schema', function test( t ) {
	lint( FIXTURE_VALID_COMPLETE, {
		'schema': CUSTOM_SCHEMA
	}, done );

	function done( err, file ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.strictEqual( file.messages.length, 0, 'returns expected value' );
		t.end();
	}
});

tape( 'the function validates an invalid Markdown file containing a missing root section using a custom schema', function test( t ) {
	var opts = {
		'schema': CUSTOM_SCHEMA
	};
	lint( FIXTURE_MISSING_ROOT, opts, done );

	function done( err, file ) {
		if ( err ) {
			t.fail( err.message );
		}
		t.strictEqual( file.messages.length, 1, 'returns expected value' );
		t.strictEqual( contains( file.messages[ 0 ].reason, 'usage' ) && contains( file.messages[ 0 ].reason, 'related' ), true, 'returns expected value' );
		t.end();
	}
});
