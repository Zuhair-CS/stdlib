/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var remark = require( 'remark' );
var readSync = require( 'to-vfile' ).readSync; // eslint-disable-line node/no-sync
var isArray = require( '@stdlib/assert/is-array' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var lint = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': IS_BROWSER
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof lint, 'function', 'main export is a function' );
	t.end();
});

tape( 'the plugin successfully lints valid Markdown not containing any HTML sections', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'valid_no_sections.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 0, 'is empty array' );
		}
		t.end();
	}
});

tape( 'the plugin successfully lints valid Markdown not containing any HTML sections (string)', opts, function test( t ) {
	remark().use( lint ).process( '# Beep\n\n## Boop\n', done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 0, 'is empty array' );
		}
		t.end();
	}
});

tape( 'the plugin successfully lints a valid HTML section structure', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'valid.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 0, 'is empty array' );
		}
		t.end();
	}
});

tape( 'the plugin successfully lints valid HTML section structure (multiple sections)', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'valid_multiple.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 0, 'is empty array' );
		}
		t.end();
	}
});

tape( 'the plugin successfully lints valid HTML section structure (nested sections)', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'valid_nested.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 0, 'is empty array' );
		}
		t.end();
	}
});

tape( 'the plugin returns a lint error if a section is missing a closing tag', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'unclosed_section.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 1, 'contains lint error' );
			t.pass( file.messages[ 0 ] );
		}
		t.end();
	}
});

tape( 'the plugin returns a lint error if a section closing tag is missing a comment', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'missing_section_comment.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 1, 'contains lint error' );
			t.pass( file.messages[ 0 ] );
		}
		t.end();
	}
});

tape( 'the plugin returns a lint error if a section closing comment does not match the class', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'mismatched_class.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 1, 'contains lint error' );
			t.pass( file.messages[ 0 ] );
		}
		t.end();
	}
});

tape( 'the plugin returns a lint error if a section end tag has no matching opening tag', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'orphaned_section_end.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 1, 'contains lint error' );
			t.pass( file.messages[ 0 ] );
		}
		t.end();
	}
});

tape( 'the plugin returns a lint error if a section is missing an empty line between closing tag and comment', opts, function test( t ) {
	var fpath = join( __dirname, 'fixtures', 'missing_empty_line.md.txt' );
	var file = readSync( fpath, 'utf8' );

	remark().use( lint ).process( file, done );

	function done( error, file ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( isArray( file.messages ), true, 'is an array' );
			t.strictEqual( file.messages.length, 1, 'contains lint error' );
			t.pass( file.messages[ 0 ] );
		}
		t.end();
	}
});
