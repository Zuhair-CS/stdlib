/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var glob = require( 'glob' ).sync;
var cwd = require( '@stdlib/process/cwd' );
var copy = require( '@stdlib/utils/copy' );
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var validateName = require( './validate_name.js' );
var validate = require( './validate.js' );


// VARIABLES //

var DEFAULTS = require( './config.json' );
var debug = logger( 'lint:pkg-json-names:sync' );


// MAIN //

/**
* Synchronously lints package.json names to ensure they match their directory location.
*
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to search for package.json files to lint
* @param {string} [options.pattern] - glob pattern
* @param {(string|StringArray)} [options.ignore] - glob pattern(s) to exclude
* @throws {TypeError} must provide valid options
* @returns {(ObjectArray|null)} lint errors or null
*
* @example
* var errs = lintSync();
* if ( errs ) {
*     console.error( JSON.stringify( errs ) );
* } else {
*     console.log( 'No detected errors.' );
* }
*
* @example
* var opts = {
*     'dir': './@stdlib/math/base'
* };
* var errs = lintSync( opts );
* if ( errs ) {
*     console.error( JSON.stringify( errs ) );
* } else {
*     console.log( 'No detected errors.' );
* }
*/
function lintSync( options ) {
	var files;
	var gopts;
	var total;
	var file;
	var opts;
	var err;
	var dir;
	var out;
	var i;
	var j;

	opts = copy( DEFAULTS );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.dir ) {
		dir = resolve( cwd(), opts.dir );
	} else {
		dir = cwd();
	}
	gopts = {
		'cwd': dir,
		'ignore': opts.ignore,
		'realpath': true // return absolute file paths
	};
	debug( 'Glob options: %s', JSON.stringify( gopts ) );

	debug( 'Searching for package.json files.' );
	files = glob( opts.pattern, gopts );

	total = files.length;
	debug( 'Found %d files.', total );
	if ( total === 0 ) {
		return null;
	}
	debug( 'Processing files.' );
	out = [];
	for ( i = 0; i < total; i++ ) {
		j = i + 1;
		debug( 'Reading file: %s (%d of %d).', files[ i ], j, total );
		file = readJSON( files[ i ] );
		if ( file instanceof Error ) {
			debug( 'Encountered an error reading file: %s (%d of %d). Error: %s', files[ i ], j, total, file.message );
			out.push({
				'file': files[ i ],
				'error': {
					'message': 'Failed to parse package.json: ' + file.message
				}
			});
		} else {
			debug( 'Successfully read file: %s (%d of %d).', files[ i ], j, total );
			debug( 'Validating package name.' );
			err = validateName( files[ i ], file );
			if ( err ) {
				debug( 'Package name validation failed: %s.', JSON.stringify( err ) );
				out.push({
					'file': files[ i ],
					'error': err
				});
			} else {
				debug( 'Package name is valid.' );
			}
		}
		debug( 'Processed %d of %d files.', j, total );
	}
	debug( 'Processed all files.' );
	if ( out.length ) {
		return out;
	}
	return null;
}


// EXPORTS //

module.exports = lintSync;
