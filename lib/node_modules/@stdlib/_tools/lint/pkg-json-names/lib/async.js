/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var glob = require( 'glob' );
var isFunction = require( '@stdlib/assert/is-function' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var lint = require( './lint.js' );


// VARIABLES //

var DEFAULTS = require( './defaults.json' );


// MAIN //

/**
* Asynchronously lints @stdlib package.json names to ensure they match their directory location.
*
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to search for @stdlib package.json files to lint
* @param {string} [options.pattern] - glob pattern
* @param {(string|StringArray)} [options.ignore] - glob pattern(s) to exclude
* @param {Function} clbk - callback to invoke upon completion
* @throws {TypeError} must provide valid options
* @throws {TypeError} callback argument must be a function
*
* @example
* lint( onLint );
*
* function onLint( error, errs ) {
*     if ( error ) {
*         throw error;
*     }
*     if ( errs.length ) {
*         console.error( JSON.stringify( errs ) );
*     } else {
*         console.log( 'No detected errors.' );
*     }
* }
*
* @example
* var opts = {
*     'dir': './@stdlib/math/base'
* };
*
* lint( opts, onLint );
*
* function onLint( error, errs ) {
*     if ( error ) {
*         throw error;
*     }
*     if ( errs.length ) {
*         console.error( JSON.stringify( errs ) );
*     } else {
*         console.log( 'No detected errors.' );
*     }
* }
*/
function lintAsync( options, clbk ) {
	var opts;
	var err;
	var cb;

	if ( arguments.length === 1 ) {
		cb = options;
		opts = copy( DEFAULTS );
	} else {
		opts = copy( DEFAULTS );
		cb = clbk;
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( 'invalid argument. Callback argument must be a function. Value: `' + cb + '`.' );
	}

	// Find package.json files:
	glob( opts.pattern, {
		'cwd': opts.dir,
		'ignore': opts.ignore,
		'realpath': true
	}, onGlob );

	/**
	* Callback invoked upon completing glob search.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {StringArray} files - file paths
	* @returns {void}
	*/
	function onGlob( error, files ) {
		var errors;
		var errs;
		var i;

		if ( error ) {
			return cb( error );
		}

		errors = [];
		for ( i = 0; i < files.length; i++ ) {
			errs = lint( files[ i ] );
			if ( errs ) {
				errors = errors.concat( errs );
			}
		}

		cb( null, errors );
	}
}


// EXPORTS //

module.exports = lintAsync;
