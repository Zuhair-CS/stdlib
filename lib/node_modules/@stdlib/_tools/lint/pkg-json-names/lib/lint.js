/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var relative = require( 'path' ).relative;
var dirname = require( 'path' ).dirname;
var join = require( 'path' ).join;
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var exists = require( '@stdlib/fs/exists' ).sync;


// VARIABLES //

var STDLIB_PREFIX = '@stdlib/';


// FUNCTIONS //

/**
* Finds the project root by looking for the .git directory.
*
* @private
* @param {string} startDir - starting directory
* @returns {(string|null)} project root or null if not found
*/
function findProjectRoot( startDir ) {
	var dir = startDir;
	while ( dir !== dirname( dir ) ) {
		if ( exists( join( dir, '.git' ) ) ) {
			return dir;
		}
		dir = dirname( dir );
	}
	return null;
}


// MAIN //

/**
* Lints an @stdlib package.json file to ensure the name matches its directory location.
*
* @private
* @param {string} fpath - file path
* @returns {(Array|null)} lint errors or null
*/
function lint( fpath ) {
	var relativePath;
	var projectRoot;
	var stdlibDir;
	var expected;
	var dirPath;
	var actual;
	var pkg;

	// Read the package.json file:
	try {
		pkg = readJSON( fpath );
	} catch ( err ) {
		return [
			{
				'file': fpath,
				'message': 'Failed to parse package.json: ' + err.message
			}
		];
	}
	if ( pkg instanceof Error ) {
		return [
			{
				'file': fpath,
				'message': 'Failed to parse package.json: ' + pkg.message
			}
		];
	}

	// Check if name field exists:
	if ( !pkg.name ) {
		return [
			{
				'file': fpath,
				'message': 'Missing "name" field in package.json'
			}
		];
	}

	// Find project root and stdlib directory:
	projectRoot = findProjectRoot( dirname( fpath ) );
	if ( !projectRoot ) {
		return [
			{
				'file': fpath,
				'message': 'Could not find project root'
			}
		];
	}

	stdlibDir = join( projectRoot, 'lib', 'node_modules', '@stdlib' );

	// Calculate expected name based on directory structure:
	dirPath = dirname( resolve( fpath ) );
	relativePath = relative( stdlibDir, dirPath );
	expected = STDLIB_PREFIX + relativePath.replace( /\\/g, '/' );

	actual = pkg.name;

	// Validate name starts with @stdlib/:
	if ( !actual.startsWith( STDLIB_PREFIX ) ) {
		return [
			{
				'file': fpath,
				'expected': expected,
				'actual': actual,
				'message': 'Package name must start with "@stdlib/" (got: "' + actual + '")'
			}
		];
	}

	// Validate name matches directory structure:
	if ( actual !== expected ) {
		return [
			{
				'file': fpath,
				'expected': expected,
				'actual': actual,
				'message': 'Package name "' + actual + '" does not match directory structure (expected: "' + expected + '")'
			}
		];
	}

	return null;
}


// EXPORTS //

module.exports = lint;
