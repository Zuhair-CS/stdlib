/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var isArray = require( '@stdlib/assert/is-array' );
var contains = require( '@stdlib/assert/contains' );


// VARIABLES //

var lint = require( './../lib/lint.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof lint, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns null if no lint errors are detected', function test( t ) {
	var fpath;
	var errs;

	fpath = join( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules', '@stdlib', 'math', 'base', 'special', 'abs', 'package.json' );
	errs = lint( fpath );

	t.equal( errs, null, 'returns null' );
	t.end();
});

tape( 'the function returns an array of lint errors if errors are detected', function test( t ) {
	var fpath;
	var errs;

	fpath = join( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules', '@stdlib', 'name-mismatch', 'package.json' );
	errs = lint( fpath );

	t.equal( isArray( errs ), true, 'returns an array' );
	t.equal( errs.length > 0, true, 'returns non-empty array' );
	t.equal( typeof errs[0].file, 'string', 'has file property' );
	t.equal( typeof errs[0].message, 'string', 'has message property' );
	t.end();
});

tape( 'the function correctly identifies name mismatches', function test( t ) {
	var fpath;
	var errs;

	fpath = join( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules', '@stdlib', 'name-mismatch', 'package.json' );
	errs = lint( fpath );

	t.equal( isArray( errs ), true, 'returns an array' );
	t.equal( errs.length, 1, 'returns single error' );
	t.equal( contains( errs[0].message, 'does not match directory structure' ), true, 'has correct error message' );
	t.equal( typeof errs[0].expected, 'string', 'has expected property' );
	t.equal( typeof errs[0].actual, 'string', 'has actual property' );
	t.equal( errs[0].expected, '@stdlib/name-mismatch', 'has correct expected name' );
	t.equal( errs[0].actual, '@stdlib/different/path', 'has correct actual name' );

	t.end();
});

tape( 'the function correctly handles missing name field', function test( t ) {
	var fpath;
	var errs;

	fpath = join( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules', '@stdlib', 'missing-name', 'package.json' );
	errs = lint( fpath );

	t.equal( isArray( errs ), true, 'returns an array' );
	t.equal( errs.length, 1, 'returns single error' );
	t.equal( contains( errs[0].message, 'Missing "name" field' ), true, 'has correct error message' );

	t.end();
});

tape( 'the function correctly handles wrong scope', function test( t ) {
	var fpath;
	var errs;

	fpath = join( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules', '@stdlib', 'wrong-scope', 'package.json' );
	errs = lint( fpath );

	t.equal( isArray( errs ), true, 'returns an array' );
	t.equal( errs.length, 1, 'returns single error' );
	t.equal( contains( errs[0].message, 'must start with "@stdlib/"' ), true, 'has correct error message' );
	t.equal( errs[0].actual, '@other/wrong-scope', 'has correct actual name' );

	t.end();
});

tape( 'the function correctly handles invalid JSON', function test( t ) {
	var fpath;
	var errs;

	fpath = join( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules', '@stdlib', 'invalid-json', 'package.json' );
	errs = lint( fpath );

	t.equal( isArray( errs ), true, 'returns an array' );
	t.equal( errs.length, 1, 'returns single error' );
	t.equal( contains( errs[0].message, 'Failed to parse package.json' ) || contains( errs[0].message, 'must start with "@stdlib/"' ), true, 'has correct error message' );

	t.end();
});
