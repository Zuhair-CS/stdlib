/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isObjectArray = require( '@stdlib/assert/is-object-array' );
var contains = require( '@stdlib/assert/contains' );


// FIXTURES //

var goodPath = resolve( __dirname, '..', 'package.json' );
var invalidJsonPath = join( __dirname, 'fixtures', 'invalid.json' );
var missingNamePath = join( __dirname, 'fixtures', 'missing-name.json' );
var wrongScopePath = join( __dirname, 'fixtures', 'wrong-scope.json' );
var nameMismatchPath = join( __dirname, 'fixtures', 'name-mismatch.json' );

var lint = require( './../lib/lint.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof lint, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns empty array if no lint errors are detected', function test( t ) {
	// Use the actual package.json file, which should be correctly named
	lint( [ goodPath ], onLint );

	function onLint( error, errs ) {
		t.strictEqual( error, null, 'returns expected value' );
		t.strictEqual( errs, null, 'returns expected value' );
		t.end();
	}
});

tape( 'the function correctly identifies name mismatches', function test( t ) {
	lint( [ nameMismatchPath ], onLint );

	function onLint( error, results ) {
		var err;

		t.strictEqual( error, null, 'returns expected value' );
		t.strictEqual( isObjectArray( results ), true, 'returns expected value' );
		t.strictEqual( results.length, 1, 'returns expected value' );

		err = results[0].error;
		t.strictEqual( typeof err, 'object', 'returns expected value' );
		t.strictEqual( contains( err.message, 'does not match directory structure' ), true, 'returns expected value' );
		t.strictEqual( typeof err.expected, 'string', 'returns expected value' );
		t.strictEqual( typeof err.actual, 'string', 'returns expected value' );
		t.strictEqual( err.actual, '@stdlib/different/path', 'returns expected value' );

		t.end();
	}
});

tape( 'the function correctly handles invalid JSON', function test( t ) {
	lint( [ invalidJsonPath ], onLint );

	function onLint( error, results ) {
		var err;

		t.strictEqual( error, null, 'returns expected value' );
		t.strictEqual( isObjectArray( results ), true, 'returns expected value' );
		t.strictEqual( results.length, 1, 'returns expected value' );

		err = results[0].error;
		t.strictEqual( typeof err, 'object', 'returns expected value' );
		t.strictEqual( contains( err.message, 'Failed to parse package.json' ), true, 'returns expected value' );

		t.end();
	}
});

tape( 'the function correctly handles missing name field', function test( t ) {
	lint( [ missingNamePath ], onLint );

	function onLint( error, results ) {
		var err;

		t.strictEqual( error, null, 'returns expected value' );
		t.strictEqual( isObjectArray( results ), true, 'returns expected value' );
		t.strictEqual( results.length, 1, 'returns expected value' );

		err = results[0].error;
		t.strictEqual( typeof err, 'object', 'returns expected value' );
		t.strictEqual( contains( err.message, 'Missing "name" field' ), true, 'returns expected value' );

		t.end();
	}
});

tape( 'the function correctly handles wrong scope', function test( t ) {
	lint( [ wrongScopePath ], onLint );

	function onLint( error, results ) {
		var err;

		t.strictEqual( error, null, 'returns expected value' );
		t.strictEqual( isObjectArray( results ), true, 'returns expected value' );
		t.strictEqual( results.length, 1, 'returns expected value' );

		err = results[0].error;
		t.strictEqual( typeof err, 'object', 'returns expected value' );
		t.strictEqual( contains( err.message, 'must start with "@stdlib/"' ), true, 'returns expected value' );
		t.strictEqual( err.actual, '@other/wrong-scope', 'returns expected value' );

		t.end();
	}
});
