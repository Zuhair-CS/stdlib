/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var exec = require( 'child_process' ).exec;
var tape = require( 'tape' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var IS_WINDOWS = require( '@stdlib/assert/is-windows' );


// VARIABLES //

var fpath = resolve( __dirname, '..', 'bin', 'cli' );
var opts = {
	'skip': IS_BROWSER || IS_WINDOWS
};


// TESTS //

tape( 'command-line interface', function test( t ) {
	t.ok( true, __filename );
	t.end();
});

tape( 'when invoked with a `--help` flag, the command-line interface prints the help text to `stderr`', opts, function test( t ) {
	var expected;
	var cmd;

	expected = 'Usage: stdlib-lint-pkg-json-names [options] [<dir>]';
	cmd = [
		'node',
		fpath,
		'--help'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.equal( stderr.toString().indexOf( expected ) !== -1, true, 'expected message' );
		}
		t.end();
	}
});

tape( 'when invoked with a `-h` flag, the command-line interface prints the help text to `stderr`', opts, function test( t ) {
	var expected;
	var cmd;

	expected = 'Usage: stdlib-lint-pkg-json-names [options] [<dir>]';
	cmd = [
		'node',
		fpath,
		'-h'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.equal( stderr.toString().indexOf( expected ) !== -1, true, 'expected message' );
		}
		t.end();
	}
});

tape( 'when invoked with a `--version` flag, the command-line interface prints the version to `stderr`', opts, function test( t ) {
	var cmd = [
		'node',
		fpath,
		'--version'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.equal( /^\d+\.\d+\.\d+/.test( stderr.toString() ), true, 'expected version' );
		}
		t.end();
	}
});

tape( 'when invoked with a `-V` flag, the command-line interface prints the version to `stderr`', opts, function test( t ) {
	var cmd = [
		'node',
		fpath,
		'-V'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.equal( /^\d+\.\d+\.\d+/.test( stderr.toString() ), true, 'expected version' );
		}
		t.end();
	}
});

tape( 'the command-line interface exits with a status code of `0` if no lint errors are detected', opts, function test( t ) {
	var cmd = [
		'node',
		fpath,
		resolve( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules', '@stdlib', 'math' )
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout ) {
		if ( error ) {
			t.equal( error.code, 0, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.end();
	}
});

tape( 'the command-line interface exits with a status code of `1` if lint errors are detected', opts, function test( t ) {
	var cmd = [
		'node',
		fpath,
		resolve( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules' )
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.equal( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.notEqual( stderr.toString(), '', 'prints to `stderr`' );
		t.end();
	}
});

tape( 'the command-line interface supports --pattern option', opts, function test( t ) {
	var cmd = [
		'node',
		fpath,
		'--pattern',
		'**/name-mismatch/package.json',
		resolve( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules' )
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.equal( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.equal( stderr.toString().indexOf( 'name-mismatch' ) !== -1, true, 'contains expected error' );
		t.end();
	}
});

tape( 'the command-line interface supports --ignore option', opts, function test( t ) {
	var cmd = [
		'node',
		fpath,
		'--ignore',
		'**/name-mismatch/**',
		resolve( __dirname, 'fixtures', 'mock-stdlib', 'lib', 'node_modules' )
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.equal( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.equal( stderr.toString().indexOf( 'name-mismatch' ) === -1, true, 'does not contain ignored error' );
		t.end();
	}
});
