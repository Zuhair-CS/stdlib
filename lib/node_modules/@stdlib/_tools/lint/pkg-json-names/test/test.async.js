/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isObjectArray = require( '@stdlib/assert/is-object-array' );
var isString = require( '@stdlib/assert/is-string' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var lint = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof lint, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an invalid callback argument', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws a type error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			lint( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid callback argument (options)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws a type error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			lint( {}, value );
		};
	}
});

tape( 'the function throws an error if provided invalid options', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws a type error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			lint( value, noop );
		};

		function noop() {
			// No-op...
		}
	}
});

tape( 'the function returns `null` if unable to resolve any packages', function test( t ) {
	var opts = {
		'dir': './nonexistent',
		'pattern': '**/*.json'
	};
	lint( opts, onLint );

	function onLint( error, errs ) {
		if ( error ) {
			t.ok( false, error.message );
		} else {
			t.strictEqual( errs, null, 'returns expected value' );
		}
		t.end();
	}
});

tape( 'the function returns `null` if unable to resolve any packages (with options)', function test( t ) {
	var opts = {
		'dir': './nonexistent',
		'pattern': 'nothing.json'
	};

	lint( opts, onLint );

	function onLint( error, errs ) {
		if ( error ) {
			t.ok( false, error.message );
		} else {
			t.strictEqual( errs, null, 'returns expected value' );
		}
		t.end();
	}
});

tape( 'the function returns an object array when errors are found', function test( t ) {
	var opts = {
		'dir': resolve( __dirname, 'fixtures' ),
		'pattern': 'bad.json'
	};

	lint( opts, onLint );

	function onLint( error, errs ) {
		if ( error ) {
			t.ok( false, error.message );
		} else {
			t.strictEqual( isObjectArray( errs ), true, 'returns expected value' );
			t.strictEqual( errs.length, 1, 'returns expected value' );
			t.strictEqual( isString( errs[ 0 ].file ), true, 'returns expected value' );
			t.strictEqual( isPlainObject( errs[ 0 ].error ), true, 'returns expected value' );
		}
		t.end();
	}
});
