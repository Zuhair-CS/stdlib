/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var contains = require( '@stdlib/assert/contains' );
var rootDir = require( '@stdlib/_tools/utils/root-dir' );
var validateName = require( './../lib/validate_name.js' );


// VARIABLES //

var STDLIB_DIR = join( rootDir(), 'lib', 'node_modules', '@stdlib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof validateName, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns null for valid package names', function test( t ) {
	var result;
	var fpath;
	var pkg;

	// Test valid package within stdlib directory
	fpath = join( STDLIB_DIR, 'math', 'base', 'special', 'abs', 'package.json' );
	pkg = {
		'name': '@stdlib/math/base/special/abs',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( result, null, 'returns expected value' );
	t.end();
});

tape( 'the function returns null for files outside stdlib directory', function test( t ) {
	var result;
	var fpath;
	var pkg;

	// Test file outside stdlib directory (should be skipped)
	fpath = join( '/some', 'other', 'directory', 'package.json' );
	pkg = {
		'name': '@other/some-package',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( result, null, 'returns expected value' );
	t.end();
});

tape( 'the function returns an error for missing name field', function test( t ) {
	var result;
	var fpath;
	var pkg;

	fpath = join( STDLIB_DIR, 'math', 'base', 'special', 'abs', 'package.json' );
	pkg = {
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );

	t.strictEqual( typeof result, 'object', 'returns expected value' );
	t.strictEqual( result !== null, true, 'returns expected value' );
	t.strictEqual( contains( result.message, 'Missing "name" field' ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an error for packages not starting with @stdlib/', function test( t ) {
	var result;
	var fpath;
	var pkg;

	fpath = join( STDLIB_DIR, 'math', 'base', 'special', 'abs', 'package.json' );
	pkg = {
		'name': '@other/some-package',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );

	t.strictEqual( typeof result, 'object', 'returns expected value' );
	t.strictEqual( result !== null, true, 'returns expected value' );
	t.strictEqual( contains( result.message, 'must start with "@stdlib/"' ), true, 'returns expected value' );
	t.strictEqual( result.actual, '@other/some-package', 'returns expected value' );
	t.strictEqual( result.expected, '@stdlib/math/base/special/abs', 'returns expected value' );
	t.end();
});

tape( 'the function returns an error for name mismatch with directory structure', function test( t ) {
	var result;
	var fpath;
	var pkg;

	fpath = join( STDLIB_DIR, 'math', 'base', 'special', 'abs', 'package.json' );
	pkg = {
		'name': '@stdlib/different/path',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );

	t.strictEqual( typeof result, 'object', 'returns expected value' );
	t.strictEqual( result !== null, true, 'returns expected value' );
	t.strictEqual( contains( result.message, 'does not match directory structure' ), true, 'returns expected value' );
	t.strictEqual( result.actual, '@stdlib/different/path', 'returns expected value' );
	t.strictEqual( result.expected, '@stdlib/math/base/special/abs', 'returns expected value' );
	t.end();
});

tape( 'the function returns first validation error for wrong scope', function test( t ) {
	var result;
	var fpath;
	var pkg;

	// Test package with both wrong scope and wrong path (should return first error)
	fpath = join( STDLIB_DIR, 'math', 'base', 'special', 'abs', 'package.json' );
	pkg = {
		'name': '@other/completely/different/path',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );

	t.strictEqual( typeof result, 'object', 'returns expected value' );
	t.strictEqual( result !== null, true, 'returns expected value' );

	// Should return the first error (wrong scope)
	t.strictEqual( contains( result.message, 'must start with "@stdlib/"' ), true, 'returns expected value' );
	t.strictEqual( result.actual, '@other/completely/different/path', 'returns expected value' );
	t.strictEqual( result.expected, '@stdlib/math/base/special/abs', 'returns expected value' );

	t.end();
});

tape( 'the function handles nested directory structures correctly', function test( t ) {
	var result;
	var fpath;
	var pkg;

	// Test deeply nested valid package
	fpath = join( STDLIB_DIR, 'stats', 'base', 'dists', 'normal', 'pdf', 'package.json' );
	pkg = {
		'name': '@stdlib/stats/base/dists/normal/pdf',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( result, null, 'returns expected value' );

	// Test deeply nested invalid package
	pkg = {
		'name': '@stdlib/stats/base/dists/normal/cdf',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( typeof result, 'object', 'returns expected value' );
	t.strictEqual( result !== null, true, 'returns expected value' );
	t.strictEqual( result.actual, '@stdlib/stats/base/dists/normal/cdf', 'returns expected value' );
	t.strictEqual( result.expected, '@stdlib/stats/base/dists/normal/pdf', 'returns expected value' );
	t.end();
});

tape( 'the function handles single-level packages correctly', function test( t ) {
	var result;
	var fpath;
	var pkg;

	// Test single-level valid package
	fpath = join( STDLIB_DIR, 'assert', 'package.json' );
	pkg = {
		'name': '@stdlib/assert',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( result, null, 'returns expected value' );

	// Test single-level invalid package
	pkg = {
		'name': '@stdlib/utils',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( typeof result, 'object', 'returns expected value' );
	t.strictEqual( result !== null, true, 'returns expected value' );
	t.strictEqual( result.actual, '@stdlib/utils', 'returns expected value' );
	t.strictEqual( result.expected, '@stdlib/assert', 'returns expected value' );
	t.end();
});

tape( 'the function handles relative paths correctly', function test( t ) {
	var result;
	var fpath;
	var pkg;

	// Test with relative path that resolves to stdlib directory
	fpath = './package.json';
	process.chdir( join( STDLIB_DIR, 'math', 'base' ) );

	pkg = {
		'name': '@stdlib/math/base',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( result, null, 'returns expected value' );
	t.end();
});

tape( 'the function handles edge cases', function test( t ) {
	var result;
	var fpath;
	var pkg;

	// Test with empty name field (treated as missing)
	fpath = join( STDLIB_DIR, 'math', 'base', 'package.json' );
	pkg = {
		'name': '',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( typeof result, 'object', 'returns expected value' );
	t.strictEqual( result !== null, true, 'returns expected value' );
	t.strictEqual( contains( result.message, 'Missing "name" field' ), true, 'returns expected value' );

	// Test with name that starts with @stdlib/ but has extra content
	pkg = {
		'name': '@stdlib/math/base/extra',
		'version': '1.0.0'
	};

	result = validateName( fpath, pkg );
	t.strictEqual( typeof result, 'object', 'returns expected value' );
	t.strictEqual( result !== null, true, 'returns expected value' );
	t.strictEqual( contains( result.message, 'does not match directory structure' ), true, 'returns expected value' );
	t.strictEqual( result.actual, '@stdlib/math/base/extra', 'returns expected value' );
	t.strictEqual( result.expected, '@stdlib/math/base', 'returns expected value' );

	t.end();
});
