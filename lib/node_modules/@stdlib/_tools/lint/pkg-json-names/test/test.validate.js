/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns null if all options are valid', function test( t ) {
	var opts;
	var err;

	opts = {};
	err = validate( opts, {
		'dir': './',
		'pattern': '**/*.json'
	});

	t.strictEqual( err, null, 'returns expected value' );
	t.strictEqual( opts.dir, './', 'returns expected value' );
	t.strictEqual( opts.pattern, '**/*.json', 'returns expected value' );

	t.end();
});

tape( 'the function returns an error if provided an invalid options argument', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, values[ i ] );
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'the function returns an error if provided an invalid `dir` option', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'dir': values[ i ]
		});
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'the function returns an error if provided an invalid `pattern` option', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'pattern': values[ i ]
		});
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'the function returns an error if provided an invalid `ignore` option', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'ignore': values[ i ]
		});
		t.strictEqual( err instanceof TypeError, true, 'returns a type error when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'the function returns null when provided a valid `ignore` option (string)', function test( t ) {
	var opts;
	var err;

	opts = {};
	err = validate( opts, {
		'ignore': '**/*.txt'
	});

	t.strictEqual( err, null, 'returns expected value' );
	t.strictEqual( opts.ignore, '**/*.txt', 'returns expected value' );
	t.end();
});

tape( 'the function returns null when provided a valid `ignore` option (array)', function test( t ) {
	var opts;
	var err;

	opts = {};
	err = validate( opts, {
		'ignore': [ '**/*.txt', '**/*.md' ]
	});

	t.strictEqual( err, null, 'returns expected value' );
	t.deepEqual( opts.ignore, [ '**/*.txt', '**/*.md' ], 'returns expected value' );
	t.end();
});
