/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];

// Simple nested function without dependencies:
var test = {
	'code': [
		'function outer() {',
		'  function inner() {',
		'    return 42;',
		'  }',
		'  return inner();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Nested function that only uses global variables:
test = {
	'code': [
		'var globalVar = 10;',
		'function outer() {',
		'  function inner() {',
		'    return globalVar * 2;',
		'  }',
		'  return inner();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Three levels deep, innermost can move to module:
test = {
	'code': [
		'function outer() {',
		'  function middle() {',
		'    function inner() {',
		'      return Math.PI;',
		'    }',
		'    return inner();',
		'  }',
		'  return middle();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'middle\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		},
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Three levels deep, innermost can move to outer function:
test = {
	'code': [
		'function outer() {',
		'  var outerVar = 10;',
		'  function middle() {',
		'    function inner() {',
		'      return outerVar * 2;',
		'    }',
		'    return inner();',
		'  }',
		'  return middle();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to outer function scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Multiple nested functions without dependencies:
test = {
	'code': [
		'function outer() {',
		'  function helper1() {',
		'    return 1;',
		'  }',
		'  function helper2() {',
		'    return 2;',
		'  }',
		'  return helper1() + helper2();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'helper1\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		},
		{
			'message': 'Function \'helper2\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Nested function with only internal variables:
test = {
	'code': [
		'function outer( x ) {',
		'  function calculate() {',
		'    var y = 10;',
		'    var z = 20;',
		'    return y + z;',
		'  }',
		'  return x * calculate();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'calculate\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Named function without dependencies:
test = {
	'code': [
		'function outer() {',
		'  function namedHelper() {',
		'    return "helper";',
		'  }',
		'  return namedHelper();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'namedHelper\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Function in block scope without dependencies:
test = {
	'code': [
		'function outer() {',
		'  if ( true ) {',
		'    function blockScoped() {',
		'      return 42;',
		'    }',
		'    blockScoped();',
		'  }',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'blockScoped\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Functions where only some can be moved:
test = {
	'code': [
		'function outer() {',
		'  function first() {',
		'    return 1;',
		'  }',
		'  function second() {',
		'    return 2;',
		'  }',
		'  function third() {',
		'    return first() + second();',
		'  }',
		'  return third();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'first\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		},
		{
			'message': 'Function \'second\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
		// Note: third() cannot be moved because it references first() and second() which are sibling function declarations
	]
};
invalid.push( test );

// Function using only built-in objects:
test = {
	'code': [
		'function outer() {',
		'  function useBuiltins() {',
		'    return Math.PI * Date.now();',
		'  }',
		'  return useBuiltins();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'useBuiltins\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Function declaration inside function expression (assignment):
test = {
	'code': [
		'var obj = {};',
		'obj.method = function() {',
		'  function inner() {',
		'    return 42;',
		'  }',
		'  return inner();',
		'};'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Function declaration inside function expression (variable):
test = {
	'code': [
		'var outer = function() {',
		'  function inner() {',
		'    return 42;',
		'  }',
		'  return inner();',
		'};'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Function declaration inside object method:
test = {
	'code': [
		'var obj = {',
		'  method: function() {',
		'    function inner() {',
		'      return 42;',
		'    }',
		'    return inner();',
		'  }',
		'};'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Function declaration inside function expression returned from factory:
test = {
	'code': [
		'function factory() {',
		'  return function() {',
		'    function inner() {',
		'      return 42;',
		'    }',
		'    return inner();',
		'  };',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Function declaration inside array method callback:
test = {
	'code': [
		'[1, 2, 3].map(function() {',
		'  function inner() {',
		'    return 42;',
		'  }',
		'  return inner();',
		'});'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Function declaration inside class method (ES6):
test = {
	'code': [
		'class MyClass {',
		'  method() {',
		'    function inner() {',
		'      return 42;',
		'    }',
		'    return inner();',
		'  }',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'inner\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	],
	'parserOptions': {
		'ecmaVersion': 6
	}
};
invalid.push( test );

// Function uses 'arguments' directly (can be moved since it refers to its own arguments):
test = {
	'code': [
		'function outer() {',
		'  function helper() {',
		'    return arguments.length;',
		'  }',
		'  return helper(1, 2, 3);',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'helper\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Function uses 'this' directly (can be moved since strict mode makes this undefined anyway):
test = {
	'code': [
		'function outer() {',
		'  function helper() {',
		'    return this.value * 2;',
		'  }',
		'  return helper.call({ value: 5 });',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'helper\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Object method with nested function using 'this':
test = {
	'code': [
		'var obj = {',
		'  value: 10,',
		'  method: function() {',
		'    function helper() {',
		'      return this.value * 2;',
		'    }',
		'    return helper.call(this);',
		'  }',
		'};'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'helper\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );

// Constructor with nested function using 'this':
test = {
	'code': [
		'function MyClass() {',
		'  this.value = 42;',
		'  function initialize() {',
		'    this.initialized = true;',
		'  }',
		'  initialize.call(this);',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Function \'initialize\' should be moved to module scope.',
			'type': 'FunctionDeclaration'
		}
	]
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
