/**
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Checks whether using imported constructor from `@stdlib/bigint/ctor`.
*
* @private
* @param {Object} scope - scope
* @returns {boolean} boolean indicating if using imported constructor from `@stdlib/bigint/ctor`
*/
function isImportedBigInt( scope ) {
	var isNotBuiltIn;
	var v;

	isNotBuiltIn = scope.set.has( 'BigInt' );
	if ( isNotBuiltIn ) {
		v = scope.set.get( 'BigInt' );
		if (
			v.defs.length > 0 &&
			v.defs[ 0 ].node.type === 'VariableDeclarator' &&
			v.defs[ 0 ].node.init &&
			v.defs[ 0 ].node.init.type === 'CallExpression' &&
			v.defs[ 0 ].node.init.callee.name === 'require' &&
			v.defs[ 0 ].node.init.arguments[ 0 ].value === '@stdlib/bigint/ctor'
		) {
			return true;
		}
	}
	return false;
}

/**
* Rule for disallowing the use of the built-in global `BigInt` literal syntax and constructor.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var scope = context.getScope();

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	* @param {string} type - node type
	*/
	function report( node, type ) {
		var message;

		if ( type === 'Literal' ) {
			message = 'Using the built-in global `BigInt` literal syntax is not allowed; use `@stdlib/bigint/ctor` instead.';
		} else if ( type === 'CallExpression' ) {
			message = 'Using the built-in global `BigInt` constructor is not allowed; use `@stdlib/bigint/ctor` instead.';
		}
		context.report({
			'node': node,
			'message': message
		});
	}

	/**
	* Validates a BigInt literal.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validateBigIntLiteral( node ) {
		if ( node.bigint ) {
			report( node, 'Literal' );
		}
	}

	/**
	* Validates a BigInt constructor.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validateBigIntConstructor( node ) {
		if (
			node.callee &&
			node.callee.type === 'Identifier' &&
			node.callee.name === 'BigInt'
		) {
			if ( isImportedBigInt( scope ) ) {
				return;
			}
			report( node, 'CallExpression' );
		}
	}

	return {
		'Literal': validateBigIntLiteral,
		'CallExpression': validateBigIntConstructor
	};
}


// MAIN //

rule = {
	'meta': {
		'type': 'problem',
		'docs': {
			'description': 'disallow the use of the built-in global `BigInt` literal syntax and constructor'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
