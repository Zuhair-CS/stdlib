/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/* eslint-disable max-lines */

import add = require( '@stdlib/complex/float32/base/add' );
import assert = require( '@stdlib/complex/float32/base/assert' );
import identity = require( '@stdlib/complex/float32/base/identity' );
import mul = require( '@stdlib/complex/float32/base/mul' );
import neg = require( '@stdlib/complex/float32/base/neg' );
import scale = require( '@stdlib/complex/float32/base/scale' );
import sub = require( '@stdlib/complex/float32/base/sub' );

/**
* Interface describing the `base` namespace.
*/
interface Namespace {
	/**
	* Adds two single-precision complex floating-point numbers.
	*
	* @param z1 - complex number
	* @param z2 - complex number
	* @returns result
	*
	* @example
	* var Complex64 = require( '@stdlib/complex/float32/ctor' );
	*
	* var z = new Complex64( 5.0, 3.0 );
	*
	* var out = ns.add( z, z );
	* // returns <Complex64>[ 10.0, 6.0 ]
	*
	* @example
	* var Float32Array = require( '@stdlib/array/float32' );
	*
	* var out = new Float32Array( 2 );
	* var v = ns.add.assign( 5.0, 3.0, 5.0, 3.0, out, 1, 0 );
	* // returns <Float32Array>[ 10.0, 6.0 ]
	*
	* var bool = ( out === v );
	* // returns true
	*
	* @example
	* var Float32Array = require( '@stdlib/array/float32' );
	*
	* var z1 = new Float32Array( [ 5.0, 3.0 ] );
	* var z2 = new Float32Array( [ 5.0, 3.0 ] );
	*
	* var out = ns.add.strided( z1, 1, 0, z2, 1, 0, new Float32Array( 2 ), 1, 0 );
	* // returns <Float32Array>[ 10.0, 6.0 ]
	*/
	add: typeof add;

	/**
	* Base (i.e., lower-level) single-precision complex number assertion functions.
	*/
	assert: typeof assert;

	/**
	* Evaluates the identity function for single-precision complex floating-point number.
	*
	* @param z - input value
	* @returns input value
	*
	* @example
	* var Complex64 = require( '@stdlib/complex/float32/ctor' );
	*
	* var v = ns.identity( new Complex64( -1.0, 2.0 ) );
	* // returns <Complex64>[ -1.0, 2.0 ]
	*/
	identity: typeof identity;

	/**
	* Multiplies two single-precision complex floating-point numbers.
	*
	* @param z1 - complex number
	* @param z2 - complex number
	* @returns result
	*
	* @example
	* var Complex64 = require( '@stdlib/complex/float32/ctor' );
	*
	* var z1 = new Complex64( 5.0, 3.0 );
	* var z2 = new Complex64( -2.0, 1.0 );
	*
	* var out = ns.mul( z1, z2 );
	* // returns <Complex64>[ -13.0, -1.0 ]
	*
	* @example
	* var Float32Array = require( '@stdlib/array/float32' );
	*
	* var out = new Float32Array( 2 );
	* var v = ns.mul.assign( 5.0, 3.0, -2.0, 1.0, out, 1, 0 );
	* // returns <Float32Array>[ -13.0, -1.0 ]
	*
	* var bool = ( out === v );
	* // returns true
	*
	* @example
	* var Float32Array = require( '@stdlib/array/float32' );
	*
	* var z1 = new Float32Array( [ 5.0, 3.0 ] );
	* var z2 = new Float32Array( [ -2.0, 1.0 ] );
	*
	* var out = ns.mul.strided( z1, 1, 0, z2, 1, 0, new Float32Array( 2 ), 1, 0 );
	* // returns <Float32Array>[ -13.0, -1.0 ]
	*/
	mul: typeof mul;

	/**
	* Negates a single-precision complex floating-point number.
	*
	* @param z - complex number
	* @returns result
	*
	* @example
	* var Complex64 = require( '@stdlib/complex/float32/ctor' );
	*
	* var z = new Complex64( -4.2, 5.5 );
	*
	* var out = ns.neg( z );
	* // returns <Complex64>[ ~4.2, -5.5 ]
	*
	* @example
	* var Complex64 = require( '@stdlib/complex/float32/ctor' );
	*
	* var z = new Complex64( 0.0, 0.0 );
	*
	* var out = ns.neg( z );
	* // returns <Complex64>[ -0.0, -0.0 ]
	*
	* @example
	* var Complex64 = require( '@stdlib/complex/float32/ctor' );
	*
	* var z = new Complex64( NaN, NaN );
	*
	* var out = ns.neg( z );
	* // returns <Complex64>[ NaN, NaN ]
	*/
	neg: typeof neg;

	/**
	* Scales a single-precision complex floating-point number by a real-valued single-precision floating-point scalar constant.
	*
	* @param alpha - scalar constant
	* @param z - complex number
	* @returns result
	*
	* @example
	* var Complex64 = require( '@stdlib/complex/float32/ctor' );
	*
	* var z = new Complex64( 5.0, 3.0 );
	*
	* var out = ns.scale( 5.0, z );
	* // returns <Complex64>[ 25.0, 15.0 ]
	*
	* @example
	* var Float32Array = require( '@stdlib/array/float32' );
	*
	* var out = new Float32Array( 2 );
	* var v = ns.scale.assign( 5.0, 5.0, 3.0, out, 1, 0 );
	* // returns <Float32Array>[ 25.0, 15.0 ]
	*
	* var bool = ( out === v );
	* // returns true
	*
	* @example
	* var Float32Array = require( '@stdlib/array/float32' );
	*
	* var z = new Float32Array( [ 5.0, 3.0 ] );
	*
	* var out = ns.scale.strided( 5.0, z, 1, 0, new Float32Array( 2 ), 1, 0 );
	* // returns <Float32Array>[ 25.0, 15.0 ]
	*/
	scale: typeof scale;

	/**
	* Subtracts two single-precision complex floating-point numbers.
	*
	* @param z1 - complex number
	* @param z2 - complex number
	* @returns result
	*
	* @example
	* var Complex64 = require( '@stdlib/complex/float32/ctor' );
	*
	* var z1 = new Complex64( 5.0, 3.0 );
	* var z2 = new Complex64( -2.0, 1.0 );
	*
	* var out = ns.sub( z1, z2 );
	* // returns <Complex64>[ 7.0, 2.0 ]
	*/
	sub: typeof sub;
}

/**
* Base (i.e., lower-level) single-precision complex number functions.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
