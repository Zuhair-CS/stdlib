/*
* @license Apache-2.0
*
* Copyright (c) 2025 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/* eslint-disable max-lines */

import binary = require( '@stdlib/random/tools/binary' );
import binaryFactory = require( '@stdlib/random/tools/binary-factory' );
import unary = require( '@stdlib/random/tools/unary' );
import unaryFactory = require( '@stdlib/random/tools/unary-factory' );

/**
* Interface describing the `tools` namespace.
*/
interface Namespace {
	/**
	* Constructor for creating ndarrays filled with pseudorandom values drawn from a binary PRNG.
	*
	* @param prng - binary pseudorandom value generator
	* @param idtypes - list containing a list of supported input data types for each PRNG parameter
	* @param odtypes - list of supported output data types
	* @param policies - dispatch policies
	* @param options - function options
	* @returns instance
	*
	* @example
	* var dtypes = require( '@stdlib/ndarray/dtypes' );
	* var uniform = require( '@stdlib/random/base/uniform' );
	*
	* var idt = dtypes( 'real_and_generic' );
	* var odt = dtypes( 'real_floating_point_and_generic' );
	*
	* var policies = {
	*     'output': 'real_floating_point_and_generic'
	* };
	* var options = {
	*     'order': 'row-major'
	* };
	*
	* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );
	*
	* var v = rand.generate( [ 2, 2 ], 0.0, 1.0 );
	* // returns <ndarray>
	*
	* @example
	* var dtypes = require( '@stdlib/ndarray/dtypes' );
	* var ndzeros = require( '@stdlib/ndarray/zeros' );
	* var uniform = require( '@stdlib/random/base/uniform' );
	*
	* var idt = dtypes( 'real_and_generic' );
	* var odt = dtypes( 'real_floating_point_and_generic' );
	*
	* var policies = {
	*     'output': 'real_floating_point_and_generic'
	* };
	* var options = {
	*     'order': 'row-major'
	* };
	*
	* var rand = new Random( uniform, [ idt, idt ], odt, policies, options );
	*
	* var out = ndzeros( [ 2, 2 ] );
	* var v = rand.assign( 0.0, 1.0, out );
	* // returns <ndarray>
	*
	* var bool = ( v === out );
	* // returns true
	*/
	binary: typeof binary;

	/**
	* Returns a function for generating pseudorandom values drawn from a binary PRNG.
	*
	* @param prng - binary pseudorandom value generator
	* @param idtypes - list containing a list of supported input data types for each PRNG parameter
	* @param odtypes - list of supported output data types
	* @param policies - dispatch policies
	* @param options - function options
	* @returns instance
	*
	* @example
	* var dtypes = require( '@stdlib/ndarray/dtypes' );
	* var uniform = require( '@stdlib/random/base/uniform' );
	*
	* var idt = dtypes( 'real_and_generic' );
	* var odt = dtypes( 'real_floating_point_and_generic' );
	*
	* var policies = {
	*     'output': 'real_floating_point_and_generic'
	* };
	* var options = {
	*     'order': 'row-major'
	* };
	*
	* var factory = ns.binaryFactory( uniform, [ idt, idt ], odt, policies, options );
	*
	* var rand = factory();
	* // returns <Function>
	*
	* var v = rand( [ 2, 2 ], 0.0, 1.0 );
	* // returns <ndarray>
	*
	* @example
	* var dtypes = require( '@stdlib/ndarray/dtypes' );
	* var ndzeros = require( '@stdlib/ndarray/zeros' );
	* var uniform = require( '@stdlib/random/base/uniform' );
	*
	* var idt = dtypes( 'real_and_generic' );
	* var odt = dtypes( 'real_floating_point_and_generic' );
	*
	* var policies = {
	*     'output': 'real_floating_point_and_generic'
	* };
	* var options = {
	*     'order': 'row-major'
	* };
	*
	* var factory = ns.binaryFactory( uniform, [ idt, idt ], odt, policies, options );
	*
	* var rand = factory();
	* // returns <Function>
	*
	* var out = ndzeros( [ 2, 2 ] );
	* var v = rand.assign( 0.0, 1.0, out );
	* // returns <ndarray>
	*
	* var bool = ( v === out );
	* // returns true
	*/
	binaryFactory: typeof binaryFactory;

	/**
	* Constructor for creating ndarrays filled with pseudorandom values drawn from a unary PRNG.
	*
	* @param prng - unary pseudorandom value generator
	* @param idtypes - list of supported input data types
	* @param odtypes - list of supported output data types
	* @param policies - dispatch policies
	* @param options - function options
	* @returns instance
	*
	* @example
	* var dtypes = require( '@stdlib/ndarray/dtypes' );
	* var exponential = require( '@stdlib/random/base/exponential' );
	*
	* var idt = dtypes( 'real_and_generic' );
	* var odt = dtypes( 'real_floating_point_and_generic' );
	*
	* var policies = {
	*     'output': 'real_floating_point_and_generic'
	* };
	* var options = {
	*     'order': 'row-major'
	* };
	*
	* var rand = new Random( exponential, idt, odt, policies, options );
	*
	* var v = rand.generate( [ 2, 2 ], 2.0 );
	* // returns <ndarray>
	*
	* @example
	* var dtypes = require( '@stdlib/ndarray/dtypes' );
	* var ndzeros = require( '@stdlib/ndarray/zeros' );
	* var exponential = require( '@stdlib/random/base/exponential' );
	*
	* var idt = dtypes( 'real_and_generic' );
	* var odt = dtypes( 'real_floating_point_and_generic' );
	*
	* var policies = {
	*     'output': 'real_floating_point_and_generic'
	* };
	* var options = {
	*     'order': 'row-major'
	* };
	*
	* var rand = new Random( exponential, idt, odt, policies, options );
	*
	* var out = ndzeros( [ 2, 2 ] );
	* var v = rand.assign( 2.0, out );
	* // returns <ndarray>
	*
	* var bool = ( v === out );
	* // returns true
	*/
	unary: typeof unary;

	/**
	* Returns a function for generating pseudorandom values drawn from a unary PRNG.
	*
	* @param prng - unary pseudorandom value generator
	* @param idtypes - list of supported input data types
	* @param odtypes - list of supported output data types
	* @param policies - dispatch policies
	* @param options - function options
	* @returns instance
	*
	* @example
	* var dtypes = require( '@stdlib/ndarray/dtypes' );
	* var exponential = require( '@stdlib/random/base/exponential' );
	*
	* var idt = dtypes( 'real_and_generic' );
	* var odt = dtypes( 'real_floating_point_and_generic' );
	*
	* var policies = {
	*     'output': 'real_floating_point_and_generic'
	* };
	* var options = {
	*     'order': 'row-major'
	* };
	*
	* var factory = ns.unaryFactory( exponential, idt, odt, policies, options );
	*
	* var rand = factory();
	* // returns <Function>
	*
	* var v = rand( [ 2, 2 ], 2.0 );
	* // returns <ndarray>
	*
	* @example
	* var dtypes = require( '@stdlib/ndarray/dtypes' );
	* var ndzeros = require( '@stdlib/ndarray/zeros' );
	* var exponential = require( '@stdlib/random/base/exponential' );
	*
	* var idt = dtypes( 'real_and_generic' );
	* var odt = dtypes( 'real_floating_point_and_generic' );
	*
	* var policies = {
	*     'output': 'real_floating_point_and_generic'
	* };
	* var options = {
	*     'order': 'row-major'
	* };
	*
	* var factory = ns.unaryFactory( exponential, idt, odt, policies, options );
	*
	* var rand = factory();
	* // returns <Function>
	*
	* var out = ndzeros( [ 2, 2 ] );
	* var v = rand.assign( 2.0, out );
	* // returns <ndarray>
	*
	* var bool = ( v === out );
	* // returns true
	*/
	unaryFactory: typeof unaryFactory;
}

/**
* Pseudorandom number generator ndarray creation function tools.
*/
declare var ns: Namespace;


// EXPORTS //

export = ns;
